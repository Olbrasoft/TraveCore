// <auto-generated />
using System;
using GeoAPI.Geometries;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Olbrasoft.Travel.Data.EntityFrameworkCore;

namespace Olbrasoft.Travel.Data.EntityFrameworkCore.Migrations
{
    [DbContext(typeof(TravelDbContext))]
    partial class TravelDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.2.3-servicing-35854")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Olbrasoft.Travel.Data.Accommodation.Attribute", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("Ban");

                    b.Property<DateTime>("Created")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("GetUtcDate()");

                    b.Property<int>("CreatorId");

                    b.Property<int>("ExpediaId");

                    b.Property<int>("SubtypeId");

                    b.Property<int>("TypeId");

                    b.HasKey("Id");

                    b.HasIndex("CreatorId");

                    b.HasIndex("SubtypeId");

                    b.HasIndex("TypeId");

                    b.ToTable("Attributes","Accommodation");
                });

            modelBuilder.Entity("Olbrasoft.Travel.Data.Accommodation.AttributeSubtype", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("Created")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("GetUtcDate()");

                    b.Property<int>("CreatorId");

                    b.Property<string>("Name");

                    b.HasKey("Id");

                    b.HasIndex("CreatorId");

                    b.ToTable("AttributeSubtypes","Accommodation");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Created = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CreatorId = 1,
                            Name = "AmenityOfAccommodation"
                        },
                        new
                        {
                            Id = 2,
                            Created = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CreatorId = 1,
                            Name = "AmenityOfRoom"
                        },
                        new
                        {
                            Id = 3,
                            Created = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CreatorId = 1,
                            Name = "CheckInOut"
                        },
                        new
                        {
                            Id = 4,
                            Created = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CreatorId = 1,
                            Name = "Other"
                        },
                        new
                        {
                            Id = 5,
                            Created = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CreatorId = 1,
                            Name = "Payment"
                        },
                        new
                        {
                            Id = 6,
                            Created = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CreatorId = 1,
                            Name = "Pets"
                        });
                });

            modelBuilder.Entity("Olbrasoft.Travel.Data.Accommodation.AttributeType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("Created")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("GetUtcDate()");

                    b.Property<int>("CreatorId");

                    b.Property<string>("Name");

                    b.HasKey("Id");

                    b.HasIndex("CreatorId");

                    b.ToTable("AttributeTypes","Accommodation");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Created = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CreatorId = 1,
                            Name = "Amenity"
                        },
                        new
                        {
                            Id = 2,
                            Created = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CreatorId = 1,
                            Name = "Policy"
                        });
                });

            modelBuilder.Entity("Olbrasoft.Travel.Data.Accommodation.Caption", b =>
                {
                    b.Property<int>("Id");

                    b.Property<DateTime>("Created")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("GetUtcDate()");

                    b.Property<int>("CreatorId");

                    b.HasKey("Id");

                    b.HasIndex("CreatorId");

                    b.ToTable("Captions","Accommodation");
                });

            modelBuilder.Entity("Olbrasoft.Travel.Data.Accommodation.Chain", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("Created")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("GetUtcDate()");

                    b.Property<int>("CreatorId");

                    b.Property<int>("ExpediaId");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(30);

                    b.HasKey("Id");

                    b.HasIndex("CreatorId");

                    b.HasIndex("ExpediaId")
                        .IsUnique();

                    b.ToTable("Chains","Accommodation");
                });

            modelBuilder.Entity("Olbrasoft.Travel.Data.Accommodation.Description", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("Created")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("GetUtcDate()");

                    b.Property<int>("CreatorId");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.HasKey("Id");

                    b.HasIndex("CreatorId");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("Descriptions","Accommodation");
                });

            modelBuilder.Entity("Olbrasoft.Travel.Data.Accommodation.LocalizedAttribute", b =>
                {
                    b.Property<int>("Id");

                    b.Property<int>("LanguageId");

                    b.Property<DateTime>("Created")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("GetUtcDate()");

                    b.Property<int>("CreatorId");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(255);

                    b.HasKey("Id", "LanguageId");

                    b.HasIndex("CreatorId");

                    b.HasIndex("LanguageId");

                    b.ToTable("LocalizedAttributes","Accommodation");
                });

            modelBuilder.Entity("Olbrasoft.Travel.Data.Accommodation.LocalizedCaption", b =>
                {
                    b.Property<int>("Id");

                    b.Property<int>("LanguageId");

                    b.Property<DateTime>("Created")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("GetUtcDate()");

                    b.Property<int>("CreatorId");

                    b.Property<string>("Text")
                        .IsRequired()
                        .HasMaxLength(255);

                    b.HasKey("Id", "LanguageId");

                    b.HasIndex("CreatorId");

                    b.HasIndex("LanguageId");

                    b.ToTable("LocalizedCaptions","Accommodation");
                });

            modelBuilder.Entity("Olbrasoft.Travel.Data.Accommodation.LocalizedDescription", b =>
                {
                    b.Property<int>("RealEstateId");

                    b.Property<int>("DescriptionId");

                    b.Property<int>("LanguageId");

                    b.Property<DateTime>("Created")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("GetUtcDate()");

                    b.Property<int>("CreatorId");

                    b.Property<string>("Text")
                        .IsRequired();

                    b.HasKey("RealEstateId", "DescriptionId", "LanguageId");

                    b.HasIndex("CreatorId");

                    b.HasIndex("DescriptionId");

                    b.HasIndex("LanguageId");

                    b.ToTable("LocalizedDescriptions","Accommodation");
                });

            modelBuilder.Entity("Olbrasoft.Travel.Data.Accommodation.LocalizedRealEstate", b =>
                {
                    b.Property<int>("Id");

                    b.Property<int>("LanguageId");

                    b.Property<string>("CheckInTime")
                        .HasMaxLength(10);

                    b.Property<string>("CheckOutTime")
                        .HasMaxLength(10);

                    b.Property<DateTime>("Created")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("GetUtcDate()");

                    b.Property<int>("CreatorId");

                    b.Property<string>("Location")
                        .HasMaxLength(80);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(70);

                    b.HasKey("Id", "LanguageId");

                    b.HasIndex("CreatorId");

                    b.HasIndex("LanguageId");

                    b.ToTable("LocalizedRealEstates","Accommodation");
                });

            modelBuilder.Entity("Olbrasoft.Travel.Data.Accommodation.LocalizedRealEstateType", b =>
                {
                    b.Property<int>("Id");

                    b.Property<int>("LanguageId");

                    b.Property<DateTime>("Created")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("GetUtcDate()");

                    b.Property<int>("CreatorId");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(256);

                    b.HasKey("Id", "LanguageId");

                    b.HasIndex("CreatorId");

                    b.HasIndex("LanguageId");

                    b.ToTable("LocalizedRealEstateTypes","Accommodation");
                });

            modelBuilder.Entity("Olbrasoft.Travel.Data.Accommodation.LocalizedRoom", b =>
                {
                    b.Property<int>("Id");

                    b.Property<int>("LanguageId");

                    b.Property<DateTime>("Created")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("GetUtcDate()");

                    b.Property<int>("CreatorId");

                    b.Property<string>("Description");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200);

                    b.HasKey("Id", "LanguageId");

                    b.HasIndex("CreatorId");

                    b.HasIndex("LanguageId");

                    b.ToTable("LocalizedRooms","Accommodation");
                });

            modelBuilder.Entity("Olbrasoft.Travel.Data.Accommodation.Photo", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("CaptionId");

                    b.Property<DateTime>("Created")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("GetUtcDate()");

                    b.Property<int>("CreatorId");

                    b.Property<int>("FileExtensionId");

                    b.Property<string>("FileName")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<bool>("IsDefault");

                    b.Property<int>("PathToPhotoId");

                    b.Property<int>("RealEstateId");

                    b.HasKey("Id");

                    b.HasIndex("CaptionId");

                    b.HasIndex("CreatorId");

                    b.HasIndex("FileExtensionId");

                    b.HasIndex("RealEstateId");

                    b.HasIndex("PathToPhotoId", "FileName", "FileExtensionId")
                        .IsUnique();

                    b.ToTable("Photos","Accommodation");
                });

            modelBuilder.Entity("Olbrasoft.Travel.Data.Accommodation.PhotoToRoom", b =>
                {
                    b.Property<int>("Id");

                    b.Property<int>("ToId");

                    b.Property<DateTime>("Created")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("GetUtcDate()");

                    b.Property<int>("CreatorId");

                    b.HasKey("Id", "ToId");

                    b.HasIndex("CreatorId");

                    b.HasIndex("ToId");

                    b.ToTable("PhotosToRooms","Accommodation");
                });

            modelBuilder.Entity("Olbrasoft.Travel.Data.Accommodation.RealEstate", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("AdditionalAddress")
                        .HasMaxLength(50);

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<int?>("AirportId");

                    b.Property<IPoint>("CenterCoordinates")
                        .IsRequired();

                    b.Property<int>("ChainId")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValue(0);

                    b.Property<int>("CountryId");

                    b.Property<DateTime>("Created")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("GetUtcDate()");

                    b.Property<int>("CreatorId");

                    b.Property<int>("ExpediaId");

                    b.Property<int>("SequenceNumber");

                    b.Property<decimal>("StarRating");

                    b.Property<int>("TypeId");

                    b.HasKey("Id");

                    b.HasIndex("AirportId");

                    b.HasIndex("ChainId");

                    b.HasIndex("CountryId");

                    b.HasIndex("CreatorId");

                    b.HasIndex("ExpediaId")
                        .IsUnique();

                    b.HasIndex("TypeId");

                    b.ToTable("RealEstates","Accommodation");
                });

            modelBuilder.Entity("Olbrasoft.Travel.Data.Accommodation.RealEstateToAttribute", b =>
                {
                    b.Property<int>("RealEstateId");

                    b.Property<int>("AttributeId");

                    b.Property<int>("LanguageId");

                    b.Property<DateTime>("Created")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("GetUtcDate()");

                    b.Property<int>("CreatorId");

                    b.Property<string>("Text")
                        .HasMaxLength(800);

                    b.HasKey("RealEstateId", "AttributeId", "LanguageId");

                    b.HasAlternateKey("AttributeId", "LanguageId", "RealEstateId");

                    b.HasIndex("CreatorId");

                    b.HasIndex("LanguageId");

                    b.ToTable("RealEstatesToAttributes","Accommodation");
                });

            modelBuilder.Entity("Olbrasoft.Travel.Data.Accommodation.RealEstateType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("Created")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("GetUtcDate()");

                    b.Property<int>("CreatorId");

                    b.Property<int>("ExpediaId");

                    b.HasKey("Id");

                    b.HasIndex("CreatorId");

                    b.HasIndex("ExpediaId")
                        .IsUnique();

                    b.ToTable("RealEstateTypes","Accommodation");
                });

            modelBuilder.Entity("Olbrasoft.Travel.Data.Accommodation.Room", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("Created")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("GetUtcDate()");

                    b.Property<int>("CreatorId");

                    b.Property<int>("ExpediaId");

                    b.Property<int>("RealEstateId");

                    b.HasKey("Id");

                    b.HasIndex("CreatorId");

                    b.HasIndex("RealEstateId");

                    b.ToTable("Rooms","Accommodation");
                });

            modelBuilder.Entity("Olbrasoft.Travel.Data.Geography.Airport", b =>
                {
                    b.Property<int>("Id");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(3);

                    b.Property<DateTime>("Created")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("GetUtcDate()");

                    b.Property<int>("CreatorId");

                    b.HasKey("Id");

                    b.HasIndex("Code")
                        .IsUnique();

                    b.HasIndex("CreatorId");

                    b.HasIndex("Id")
                        .IsUnique();

                    b.ToTable("Airports","Geography");
                });

            modelBuilder.Entity("Olbrasoft.Travel.Data.Geography.Continent", b =>
                {
                    b.Property<int>("Id");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(2);

                    b.Property<DateTime>("Created")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("GetUtcDate()");

                    b.Property<int>("CreatorId");

                    b.HasKey("Id");

                    b.HasIndex("Code")
                        .IsUnique();

                    b.HasIndex("CreatorId");

                    b.HasIndex("Id")
                        .IsUnique();

                    b.ToTable("Continents","Geography");
                });

            modelBuilder.Entity("Olbrasoft.Travel.Data.Geography.Country", b =>
                {
                    b.Property<int>("Id");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(2);

                    b.Property<DateTime>("Created")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("GetUtcDate()");

                    b.Property<int>("CreatorId");

                    b.HasKey("Id");

                    b.HasIndex("Code")
                        .IsUnique();

                    b.HasIndex("CreatorId");

                    b.HasIndex("Id")
                        .IsUnique();

                    b.ToTable("Countries","Geography");
                });

            modelBuilder.Entity("Olbrasoft.Travel.Data.Geography.LocalizedRegion", b =>
                {
                    b.Property<int>("Id");

                    b.Property<int>("LanguageId");

                    b.Property<DateTime>("Created")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("GetUtcDate()");

                    b.Property<int>("CreatorId");

                    b.Property<string>("LongName")
                        .HasMaxLength(510);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255);

                    b.HasKey("Id", "LanguageId");

                    b.HasIndex("CreatorId");

                    b.HasIndex("LanguageId");

                    b.ToTable("LocalizedRegions","Geography");
                });

            modelBuilder.Entity("Olbrasoft.Travel.Data.Geography.Region", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<IPoint>("CenterCoordinates")
                        .HasColumnType("geography");

                    b.Property<IPolygon>("Coordinates")
                        .HasColumnType("geography");

                    b.Property<DateTime>("Created")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("GetUtcDate()");

                    b.Property<int>("CreatorId");

                    b.Property<long>("ExpediaId");

                    b.Property<int>("SubtypeId");

                    b.HasKey("Id");

                    b.HasIndex("CreatorId");

                    b.HasIndex("SubtypeId");

                    b.ToTable("Regions","Geography");
                });

            modelBuilder.Entity("Olbrasoft.Travel.Data.Geography.RegionToRegion", b =>
                {
                    b.Property<int>("Id");

                    b.Property<int>("ToId");

                    b.Property<DateTime>("Created")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("GetUtcDate()");

                    b.Property<int>("CreatorId");

                    b.HasKey("Id", "ToId");

                    b.HasIndex("CreatorId");

                    b.HasIndex("ToId");

                    b.ToTable("RegionToRegions","Geography");
                });

            modelBuilder.Entity("Olbrasoft.Travel.Data.Geography.RegionToSubclass", b =>
                {
                    b.Property<int>("Id");

                    b.Property<int>("ToId");

                    b.Property<DateTime>("Created")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("GetUtcDate()");

                    b.Property<int>("CreatorId");

                    b.HasKey("Id", "ToId");

                    b.HasIndex("CreatorId");

                    b.HasIndex("ToId");

                    b.ToTable("RegionToSubclasss","Geography");
                });

            modelBuilder.Entity("Olbrasoft.Travel.Data.Geography.Subclass", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("Created")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("GetUtcDate()");

                    b.Property<int>("CreatorId");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.HasKey("Id");

                    b.HasIndex("CreatorId");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("SubClasses","Geography");
                });

            modelBuilder.Entity("Olbrasoft.Travel.Data.Geography.Subtype", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("Created")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("GetUtcDate()");

                    b.Property<int>("CreatorId");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.HasKey("Id");

                    b.HasIndex("CreatorId");

                    b.HasIndex("Description")
                        .IsUnique();

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("Subtypes","Geography");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Created = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CreatorId = 1,
                            Description = "World",
                            Name = "World"
                        },
                        new
                        {
                            Id = 2,
                            Created = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CreatorId = 1,
                            Description = "Continent",
                            Name = "Continent"
                        },
                        new
                        {
                            Id = 3,
                            Created = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CreatorId = 1,
                            Description = "Country",
                            Name = "Country"
                        },
                        new
                        {
                            Id = 4,
                            Created = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CreatorId = 1,
                            Description = "Province (State)",
                            Name = "Province"
                        },
                        new
                        {
                            Id = 5,
                            Created = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CreatorId = 1,
                            Description = "Multi-Region (within a country)",
                            Name = "MultiRegion"
                        },
                        new
                        {
                            Id = 6,
                            Created = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CreatorId = 1,
                            Description = "Multi-City (Vicinity)",
                            Name = "MultiCity"
                        },
                        new
                        {
                            Id = 7,
                            Created = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CreatorId = 1,
                            Description = "City",
                            Name = "City"
                        },
                        new
                        {
                            Id = 8,
                            Created = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CreatorId = 1,
                            Description = "Neighborhood",
                            Name = "Neighborhood"
                        },
                        new
                        {
                            Id = 9,
                            Created = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CreatorId = 1,
                            Description = "Point of Interest",
                            Name = "PointOfInterest"
                        },
                        new
                        {
                            Id = 10,
                            Created = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CreatorId = 1,
                            Description = "Point of Interest Shadow",
                            Name = "PointOfInterestShadow"
                        },
                        new
                        {
                            Id = 11,
                            Created = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CreatorId = 1,
                            Description = "Airport",
                            Name = "Airport"
                        },
                        new
                        {
                            Id = 12,
                            Created = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CreatorId = 1,
                            Description = "Train Station",
                            Name = "TrainStation"
                        });
                });

            modelBuilder.Entity("Olbrasoft.Travel.Data.IO.FileExtension", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("Created")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("GetUtcDate()");

                    b.Property<int>("CreatorId");

                    b.Property<string>("Extension")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.HasKey("Id");

                    b.HasIndex("CreatorId");

                    b.HasIndex("Extension")
                        .IsUnique();

                    b.ToTable("FileExtensions","IO");
                });

            modelBuilder.Entity("Olbrasoft.Travel.Data.IO.PathToPhoto", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("Created")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("GetUtcDate()");

                    b.Property<int>("CreatorId");

                    b.Property<string>("Path")
                        .IsRequired()
                        .HasMaxLength(300);

                    b.HasKey("Id");

                    b.HasIndex("CreatorId");

                    b.HasIndex("Path")
                        .IsUnique();

                    b.ToTable("PathsToPhotos","IO");
                });

            modelBuilder.Entity("Olbrasoft.Travel.Data.Identity.Role", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ConcurrencyStamp");

                    b.Property<DateTime>("Created")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("GetUtcDate()");

                    b.Property<string>("Name");

                    b.Property<string>("NormalizedName");

                    b.HasKey("Id");

                    b.ToTable("Roles","Identity");
                });

            modelBuilder.Entity("Olbrasoft.Travel.Data.Identity.RoleClaim", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<DateTime>("Created")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("GetUtcDate()");

                    b.Property<int>("RoleId");

                    b.HasKey("Id");

                    b.ToTable("RolesClaims","Identity");
                });

            modelBuilder.Entity("Olbrasoft.Travel.Data.Identity.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("AccessFailedCount");

                    b.Property<string>("ConcurrencyStamp");

                    b.Property<DateTime>("Created")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("GetUtcDate()");

                    b.Property<string>("Email")
                        .HasMaxLength(256);

                    b.Property<bool>("EmailConfirmed");

                    b.Property<bool>("LockoutEnabled");

                    b.Property<DateTimeOffset?>("LockoutEnd");

                    b.Property<string>("NormalizedEmail");

                    b.Property<string>("NormalizedUserName");

                    b.Property<string>("PasswordHash");

                    b.Property<string>("PhoneNumber");

                    b.Property<bool>("PhoneNumberConfirmed");

                    b.Property<string>("SecurityStamp");

                    b.Property<bool>("TwoFactorEnabled");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("UserName")
                        .IsUnique()
                        .HasName("UserNameIndex");

                    b.ToTable("Users","Identity");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "5abb44c9-726b-40ad-a7c3-2cbc80d6aac5",
                            Created = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            PhoneNumberConfirmed = false,
                            TwoFactorEnabled = false,
                            UserName = "TravelDbContext"
                        });
                });

            modelBuilder.Entity("Olbrasoft.Travel.Data.Identity.UserClaim", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<DateTime>("Created")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("GetUtcDate()");

                    b.Property<int>("UserId");

                    b.HasKey("Id");

                    b.ToTable("UsersClaims","Identity");
                });

            modelBuilder.Entity("Olbrasoft.Travel.Data.Identity.UserLogin", b =>
                {
                    b.Property<int>("UserId");

                    b.Property<string>("ProviderKey");

                    b.Property<DateTime>("Created")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("GetUtcDate()");

                    b.Property<string>("LoginProvider");

                    b.Property<string>("ProviderDisplayName");

                    b.HasKey("UserId", "ProviderKey");

                    b.ToTable("UsersLogins","Identity");
                });

            modelBuilder.Entity("Olbrasoft.Travel.Data.Identity.UserRole", b =>
                {
                    b.Property<int>("UserId");

                    b.Property<int>("RoleId");

                    b.Property<DateTime>("Created")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("GetUtcDate()");

                    b.HasKey("UserId", "RoleId");

                    b.ToTable("UsersRoles","Identity");
                });

            modelBuilder.Entity("Olbrasoft.Travel.Data.Identity.UserToken", b =>
                {
                    b.Property<int>("UserId");

                    b.Property<string>("LoginProvider");

                    b.Property<string>("Name");

                    b.Property<DateTime>("Created")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("GetUtcDate()");

                    b.Property<string>("Value");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("UsersTokens","Identity");
                });

            modelBuilder.Entity("Olbrasoft.Travel.Data.Localization.Language", b =>
                {
                    b.Property<int>("Id");

                    b.Property<DateTime>("Created")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("GetUtcDate()");

                    b.Property<int>("CreatorId");

                    b.Property<string>("ExpediaCode")
                        .IsRequired()
                        .HasMaxLength(5);

                    b.HasKey("Id");

                    b.HasIndex("CreatorId");

                    b.HasIndex("ExpediaCode")
                        .IsUnique();

                    b.ToTable("Languages","Localization");
                });

            modelBuilder.Entity("Olbrasoft.Travel.Data.Accommodation.Attribute", b =>
                {
                    b.HasOne("Olbrasoft.Travel.Data.Identity.User", "Creator")
                        .WithMany("Attributes")
                        .HasForeignKey("CreatorId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Olbrasoft.Travel.Data.Accommodation.AttributeSubtype", "Subtype")
                        .WithMany("Attributes")
                        .HasForeignKey("SubtypeId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Olbrasoft.Travel.Data.Accommodation.AttributeType", "Type")
                        .WithMany("Attributes")
                        .HasForeignKey("TypeId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("Olbrasoft.Travel.Data.Accommodation.AttributeSubtype", b =>
                {
                    b.HasOne("Olbrasoft.Travel.Data.Identity.User", "Creator")
                        .WithMany("SubTypesOfAttributes")
                        .HasForeignKey("CreatorId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Olbrasoft.Travel.Data.Accommodation.AttributeType", b =>
                {
                    b.HasOne("Olbrasoft.Travel.Data.Identity.User", "Creator")
                        .WithMany("TypesOfAttributes")
                        .HasForeignKey("CreatorId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Olbrasoft.Travel.Data.Accommodation.Caption", b =>
                {
                    b.HasOne("Olbrasoft.Travel.Data.Identity.User", "Creator")
                        .WithMany("Captions")
                        .HasForeignKey("CreatorId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Olbrasoft.Travel.Data.Accommodation.Chain", b =>
                {
                    b.HasOne("Olbrasoft.Travel.Data.Identity.User", "Creator")
                        .WithMany("Chains")
                        .HasForeignKey("CreatorId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Olbrasoft.Travel.Data.Accommodation.Description", b =>
                {
                    b.HasOne("Olbrasoft.Travel.Data.Identity.User", "Creator")
                        .WithMany("AccommodationDescriptions")
                        .HasForeignKey("CreatorId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Olbrasoft.Travel.Data.Accommodation.LocalizedAttribute", b =>
                {
                    b.HasOne("Olbrasoft.Travel.Data.Identity.User", "Creator")
                        .WithMany("LocalizedAttributes")
                        .HasForeignKey("CreatorId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Olbrasoft.Travel.Data.Accommodation.Attribute", "Attribute")
                        .WithMany("LocalizedAttributes")
                        .HasForeignKey("Id")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Olbrasoft.Travel.Data.Localization.Language", "Language")
                        .WithMany("LocalizedAttributes")
                        .HasForeignKey("LanguageId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("Olbrasoft.Travel.Data.Accommodation.LocalizedCaption", b =>
                {
                    b.HasOne("Olbrasoft.Travel.Data.Identity.User", "Creator")
                        .WithMany("LocalizedCaptions")
                        .HasForeignKey("CreatorId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Olbrasoft.Travel.Data.Accommodation.Caption", "Caption")
                        .WithMany("LocalizedCaptions")
                        .HasForeignKey("Id")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Olbrasoft.Travel.Data.Localization.Language", "Language")
                        .WithMany("LocalizedCaptions")
                        .HasForeignKey("LanguageId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("Olbrasoft.Travel.Data.Accommodation.LocalizedDescription", b =>
                {
                    b.HasOne("Olbrasoft.Travel.Data.Identity.User", "Creator")
                        .WithMany("LocalizedDescriptionsOfAccommodations")
                        .HasForeignKey("CreatorId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Olbrasoft.Travel.Data.Accommodation.Description", "Description")
                        .WithMany("LocalizedDescriptions")
                        .HasForeignKey("DescriptionId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Olbrasoft.Travel.Data.Localization.Language", "Language")
                        .WithMany("LocalizedDescriptions")
                        .HasForeignKey("LanguageId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Olbrasoft.Travel.Data.Accommodation.RealEstate", "RealEstate")
                        .WithMany("LocalizedDescriptionsOfAccommodations")
                        .HasForeignKey("RealEstateId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Olbrasoft.Travel.Data.Accommodation.LocalizedRealEstate", b =>
                {
                    b.HasOne("Olbrasoft.Travel.Data.Identity.User", "Creator")
                        .WithMany("LocalizedAccommodations")
                        .HasForeignKey("CreatorId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Olbrasoft.Travel.Data.Accommodation.RealEstate", "RealEstate")
                        .WithMany("LocalizedAccommodations")
                        .HasForeignKey("Id")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Olbrasoft.Travel.Data.Localization.Language", "Language")
                        .WithMany("LocalizedRealEstates")
                        .HasForeignKey("LanguageId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("Olbrasoft.Travel.Data.Accommodation.LocalizedRealEstateType", b =>
                {
                    b.HasOne("Olbrasoft.Travel.Data.Identity.User", "Creator")
                        .WithMany("LocalizedTypesOfAccommodations")
                        .HasForeignKey("CreatorId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Olbrasoft.Travel.Data.Accommodation.RealEstateType", "Type")
                        .WithMany("LocalizedPropertyTypes")
                        .HasForeignKey("Id")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Olbrasoft.Travel.Data.Localization.Language", "Language")
                        .WithMany("LocalizedRealEstateTypes")
                        .HasForeignKey("LanguageId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("Olbrasoft.Travel.Data.Accommodation.LocalizedRoom", b =>
                {
                    b.HasOne("Olbrasoft.Travel.Data.Identity.User", "Creator")
                        .WithMany("LocalizedRooms")
                        .HasForeignKey("CreatorId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Olbrasoft.Travel.Data.Accommodation.Room", "Type")
                        .WithMany("LocalizedRooms")
                        .HasForeignKey("Id")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Olbrasoft.Travel.Data.Localization.Language", "Language")
                        .WithMany("LocalizedRoomTypes")
                        .HasForeignKey("LanguageId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("Olbrasoft.Travel.Data.Accommodation.Photo", b =>
                {
                    b.HasOne("Olbrasoft.Travel.Data.Accommodation.Caption", "Caption")
                        .WithMany()
                        .HasForeignKey("CaptionId");

                    b.HasOne("Olbrasoft.Travel.Data.Identity.User", "Creator")
                        .WithMany("AccommodationPhotos")
                        .HasForeignKey("CreatorId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Olbrasoft.Travel.Data.IO.FileExtension", "FileExtension")
                        .WithMany("PhotosOfAccommodations")
                        .HasForeignKey("FileExtensionId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Olbrasoft.Travel.Data.IO.PathToPhoto", "PathToPhoto")
                        .WithMany("AccommodationPhotos")
                        .HasForeignKey("PathToPhotoId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Olbrasoft.Travel.Data.Accommodation.RealEstate", "RealEstate")
                        .WithMany("PhotosOfAccommodations")
                        .HasForeignKey("RealEstateId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Olbrasoft.Travel.Data.Accommodation.PhotoToRoom", b =>
                {
                    b.HasOne("Olbrasoft.Travel.Data.Identity.User", "Creator")
                        .WithMany("PhotosOfAccommodationsToTypesOfRooms")
                        .HasForeignKey("CreatorId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Olbrasoft.Travel.Data.Accommodation.Photo", "Photo")
                        .WithMany("ToTypesOfRooms")
                        .HasForeignKey("Id")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Olbrasoft.Travel.Data.Accommodation.Room", "Room")
                        .WithMany("PhotosToRooms")
                        .HasForeignKey("ToId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("Olbrasoft.Travel.Data.Accommodation.RealEstate", b =>
                {
                    b.HasOne("Olbrasoft.Travel.Data.Geography.Airport", "Airport")
                        .WithMany("Accommodations")
                        .HasForeignKey("AirportId");

                    b.HasOne("Olbrasoft.Travel.Data.Accommodation.Chain", "Chain")
                        .WithMany("Accommodations")
                        .HasForeignKey("ChainId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Olbrasoft.Travel.Data.Geography.Country", "Country")
                        .WithMany("Accommodations")
                        .HasForeignKey("CountryId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Olbrasoft.Travel.Data.Identity.User", "Creator")
                        .WithMany("Accommodations")
                        .HasForeignKey("CreatorId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Olbrasoft.Travel.Data.Accommodation.RealEstateType", "RealEstateType")
                        .WithMany()
                        .HasForeignKey("TypeId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Olbrasoft.Travel.Data.Accommodation.RealEstateToAttribute", b =>
                {
                    b.HasOne("Olbrasoft.Travel.Data.Accommodation.Attribute", "Attribute")
                        .WithMany("AccommodationsToAttributes")
                        .HasForeignKey("AttributeId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Olbrasoft.Travel.Data.Identity.User", "Creator")
                        .WithMany("AccommodationsToAttributes")
                        .HasForeignKey("CreatorId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Olbrasoft.Travel.Data.Localization.Language", "Language")
                        .WithMany("RealEstatesToAttributes")
                        .HasForeignKey("LanguageId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Olbrasoft.Travel.Data.Accommodation.RealEstate", "RealEstate")
                        .WithMany("AccommodationsToAttributes")
                        .HasForeignKey("RealEstateId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Olbrasoft.Travel.Data.Accommodation.RealEstateType", b =>
                {
                    b.HasOne("Olbrasoft.Travel.Data.Identity.User", "Creator")
                        .WithMany("TypesOfAccommodations")
                        .HasForeignKey("CreatorId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Olbrasoft.Travel.Data.Accommodation.Room", b =>
                {
                    b.HasOne("Olbrasoft.Travel.Data.Identity.User", "Creator")
                        .WithMany("TypesOfRooms")
                        .HasForeignKey("CreatorId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Olbrasoft.Travel.Data.Accommodation.RealEstate", "RealEstate")
                        .WithMany("TypesOfRooms")
                        .HasForeignKey("RealEstateId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Olbrasoft.Travel.Data.Geography.Airport", b =>
                {
                    b.HasOne("Olbrasoft.Travel.Data.Identity.User", "Creator")
                        .WithMany("Airports")
                        .HasForeignKey("CreatorId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Olbrasoft.Travel.Data.Geography.Region", "Region")
                        .WithOne("ExpandingInformationAboutAirport")
                        .HasForeignKey("Olbrasoft.Travel.Data.Geography.Airport", "Id")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Olbrasoft.Travel.Data.Geography.Continent", b =>
                {
                    b.HasOne("Olbrasoft.Travel.Data.Identity.User", "Creator")
                        .WithMany("Continents")
                        .HasForeignKey("CreatorId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Olbrasoft.Travel.Data.Geography.Region", "Region")
                        .WithOne("ExpandingInformationAboutContinent")
                        .HasForeignKey("Olbrasoft.Travel.Data.Geography.Continent", "Id")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Olbrasoft.Travel.Data.Geography.Country", b =>
                {
                    b.HasOne("Olbrasoft.Travel.Data.Identity.User", "Creator")
                        .WithMany("Countries")
                        .HasForeignKey("CreatorId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Olbrasoft.Travel.Data.Geography.Region", "Region")
                        .WithOne("ExpandingInformationAboutCountry")
                        .HasForeignKey("Olbrasoft.Travel.Data.Geography.Country", "Id")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Olbrasoft.Travel.Data.Geography.LocalizedRegion", b =>
                {
                    b.HasOne("Olbrasoft.Travel.Data.Identity.User", "Creator")
                        .WithMany("LocalizedRegions")
                        .HasForeignKey("CreatorId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Olbrasoft.Travel.Data.Geography.Region", "Region")
                        .WithMany("LocalizedRegions")
                        .HasForeignKey("Id")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Olbrasoft.Travel.Data.Localization.Language", "Language")
                        .WithMany("LocalizedRegions")
                        .HasForeignKey("LanguageId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("Olbrasoft.Travel.Data.Geography.Region", b =>
                {
                    b.HasOne("Olbrasoft.Travel.Data.Identity.User", "Creator")
                        .WithMany("Regions")
                        .HasForeignKey("CreatorId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Olbrasoft.Travel.Data.Geography.Subtype", "Subtype")
                        .WithMany("Regions")
                        .HasForeignKey("SubtypeId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("Olbrasoft.Travel.Data.Geography.RegionToRegion", b =>
                {
                    b.HasOne("Olbrasoft.Travel.Data.Identity.User", "Creator")
                        .WithMany("RegionsToRegions")
                        .HasForeignKey("CreatorId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Olbrasoft.Travel.Data.Geography.Region", "Region")
                        .WithMany("ToChildRegions")
                        .HasForeignKey("Id")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Olbrasoft.Travel.Data.Geography.Region", "ParentRegion")
                        .WithMany("ToParentRegions")
                        .HasForeignKey("ToId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Olbrasoft.Travel.Data.Geography.RegionToSubclass", b =>
                {
                    b.HasOne("Olbrasoft.Travel.Data.Identity.User", "Creator")
                        .WithMany("RegionsToSubclasses")
                        .HasForeignKey("CreatorId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Olbrasoft.Travel.Data.Geography.Region", "Region")
                        .WithMany("ToSubclasses")
                        .HasForeignKey("Id")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Olbrasoft.Travel.Data.Geography.Subclass", "Subclass")
                        .WithMany("ToRegions")
                        .HasForeignKey("ToId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("Olbrasoft.Travel.Data.Geography.Subclass", b =>
                {
                    b.HasOne("Olbrasoft.Travel.Data.Identity.User", "Creator")
                        .WithMany("SubClasses")
                        .HasForeignKey("CreatorId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Olbrasoft.Travel.Data.Geography.Subtype", b =>
                {
                    b.HasOne("Olbrasoft.Travel.Data.Identity.User", "Creator")
                        .WithMany("RegionSubtypes")
                        .HasForeignKey("CreatorId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Olbrasoft.Travel.Data.IO.FileExtension", b =>
                {
                    b.HasOne("Olbrasoft.Travel.Data.Identity.User", "Creator")
                        .WithMany("FilesExtensions")
                        .HasForeignKey("CreatorId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Olbrasoft.Travel.Data.IO.PathToPhoto", b =>
                {
                    b.HasOne("Olbrasoft.Travel.Data.Identity.User", "Creator")
                        .WithMany("PathsOfPhotos")
                        .HasForeignKey("CreatorId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Olbrasoft.Travel.Data.Localization.Language", b =>
                {
                    b.HasOne("Olbrasoft.Travel.Data.Identity.User", "Creator")
                        .WithMany("Languages")
                        .HasForeignKey("CreatorId")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
